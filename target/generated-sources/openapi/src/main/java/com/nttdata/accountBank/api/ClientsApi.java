/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.accountBank.api;

import com.nttdata.accountBank.model.ClientRequest;
import com.nttdata.accountBank.model.ClientResponse;
import com.nttdata.accountBank.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-24T11:19:56.527457300-05:00[America/Lima]")
@Validated
@Api(value = "clients", description = "the clients API")
public interface ClientsApi {

    default ClientsApiDelegate getDelegate() {
        return new ClientsApiDelegate() {};
    }

    /**
     * POST /clients : Create a new client
     *
     * @param clientRequest  (required)
     * @return Client created (status code 201)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Create a new client", nickname = "createClient", notes = "", response = ClientResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Client created", response = ClientResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = ErrorResponse.class) })
    @PostMapping(
        value = "/clients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientResponse> createClient(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ClientRequest clientRequest) {
        return getDelegate().createClient(clientRequest);
    }


    /**
     * DELETE /clients/{id} : Delete a client by ID
     *
     * @param id  (required)
     * @return Client deleted (status code 204)
     *         or Client not found (status code 404)
     */
    @ApiOperation(value = "Delete a client by ID", nickname = "deleteClient", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Client deleted"),
        @ApiResponse(code = 404, message = "Client not found", response = ErrorResponse.class) })
    @DeleteMapping(
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteClient(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().deleteClient(id);
    }


    /**
     * GET /clients : Get all clients
     *
     * @return List of clients (status code 200)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Get all clients", nickname = "getAllClients", notes = "", response = ClientResponse.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of clients", response = ClientResponse.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @GetMapping(
        value = "/clients",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ClientResponse>> getAllClients() {
        return getDelegate().getAllClients();
    }


    /**
     * GET /clients/{id} : Get a client by ID
     *
     * @param id  (required)
     * @return Client found (status code 200)
     *         or Client not found (status code 404)
     */
    @ApiOperation(value = "Get a client by ID", nickname = "getClientById", notes = "", response = ClientResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client found", response = ClientResponse.class),
        @ApiResponse(code = 404, message = "Client not found", response = ErrorResponse.class) })
    @GetMapping(
        value = "/clients/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientResponse> getClientById(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().getClientById(id);
    }


    /**
     * PUT /clients/{id} : Update a client by ID
     *
     * @param id  (required)
     * @param clientRequest  (required)
     * @return Client updated (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Update a client by ID", nickname = "updateClient", notes = "", response = ClientResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client updated", response = ClientResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = ErrorResponse.class) })
    @PutMapping(
        value = "/clients/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientResponse> updateClient(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ClientRequest clientRequest) {
        return getDelegate().updateClient(id, clientRequest);
    }

}
