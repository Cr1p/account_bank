/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.accountBank.api;

import com.nttdata.accountBank.model.ErrorResponse;
import com.nttdata.accountBank.model.TransactionRequest;
import com.nttdata.accountBank.model.TransactionResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-05T05:43:09.924039800-05:00[America/Lima]")
@Validated
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default TransactionsApiDelegate getDelegate() {
        return new TransactionsApiDelegate() {};
    }

    /**
     * POST /transactions : Create a new transaction
     *
     * @param transactionRequest  (required)
     * @return Transaction created (status code 201)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Create a new transaction", nickname = "createTransaction", notes = "", response = TransactionResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction created", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = ErrorResponse.class) })
    @PostMapping(
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> createTransaction(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().createTransaction(transactionRequest);
    }


    /**
     * DELETE /transactions/{id} : Delete a transaction by ID
     *
     * @param id  (required)
     * @return Transaction deleted (status code 204)
     *         or Transaction not found (status code 404)
     */
    @ApiOperation(value = "Delete a transaction by ID", nickname = "deleteTransaction", notes = "", tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Transaction deleted"),
        @ApiResponse(code = 404, message = "Transaction not found", response = ErrorResponse.class) })
    @DeleteMapping(
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteTransaction(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().deleteTransaction(id);
    }


    /**
     * GET /transactions : Get all transactions
     *
     * @return List of transactions (status code 200)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Get all transactions", nickname = "getAllTransactions", notes = "", response = TransactionResponse.class, responseContainer = "List", tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of transactions", response = TransactionResponse.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @GetMapping(
        value = "/transactions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionResponse>> getAllTransactions() {
        return getDelegate().getAllTransactions();
    }


    /**
     * GET /transactions/{id} : Get a transaction by ID
     *
     * @param id  (required)
     * @return Transaction found (status code 200)
     *         or Transaction not found (status code 404)
     */
    @ApiOperation(value = "Get a transaction by ID", nickname = "getTransactionById", notes = "", response = TransactionResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction found", response = TransactionResponse.class),
        @ApiResponse(code = 404, message = "Transaction not found", response = ErrorResponse.class) })
    @GetMapping(
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> getTransactionById(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().getTransactionById(id);
    }


    /**
     * PUT /transactions/{id} : Update a transaction by ID
     *
     * @param id  (required)
     * @param transactionRequest  (required)
     * @return Transaction updated (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Update a transaction by ID", nickname = "updateTransaction", notes = "", response = TransactionResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction updated", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = ErrorResponse.class) })
    @PutMapping(
        value = "/transactions/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> updateTransaction(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().updateTransaction(id, transactionRequest);
    }

}
