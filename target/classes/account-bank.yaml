openapi: 3.0.3
info:
  title: Financial System API
  description: API for managing clients, financial products, and transactions.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /clients:
    get:
      summary: Get all clients
      operationId: getAllClients
      tags:
        - Client
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new client
      operationId: createClient
      tags:
        - Client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clients/{id}:
    get:
      summary: Get a client by ID
      operationId: getClientById
      tags:
        - Client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a client by ID
      operationId: updateClient
      tags:
        - Client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a client by ID
      operationId: deleteClient
      tags:
        - Client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Client deleted
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /financial-products:
    get:
      summary: Get all financial products
      operationId: getAllFinancialProducts
      tags:
        - FinancialProduct
      responses:
        '200':
          description: List of financial products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialProductResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new financial product
      operationId: createFinancialProduct
      tags:
        - FinancialProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialProductRequest'
      responses:
        '201':
          description: Financial product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialProductResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /financial-products/{id}:
    get:
      summary: Get a financial product by ID
      operationId: getFinancialProductById
      tags:
        - FinancialProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Financial product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialProductResponse'
        '404':
          description: Financial product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a financial product by ID
      operationId: updateFinancialProduct
      tags:
        - FinancialProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialProductRequest'
      responses:
        '200':
          description: Financial product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialProductResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a financial product by ID
      operationId: deleteFinancialProduct
      tags:
        - FinancialProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Financial product deleted
        '404':
          description: Financial product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions:
    get:
      summary: Get all transactions
      operationId: getAllTransactions
      tags:
        - Transaction
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new transaction
      operationId: createTransaction
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{id}:
    get:
      summary: Get a transaction by ID
      operationId: getTransactionById
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a transaction by ID
      operationId: updateTransaction
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a transaction by ID
      operationId: deleteTransaction
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Transaction deleted
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ClientRequest:
      type: object
      properties:
        documentType:
          type: string
        documentNumber:
          type: string
        clientType:
          type: string
          enum: [personal, business]
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        phoneNumber:
          type: string
      required:
        - documentType
        - documentNumber
        - clientType
        - name
        - email

    ClientResponse:
      type: object
      properties:
        id:
          type: string
        documentType:
          type: string
        documentNumber:
          type: string
        clientType:
          type: string
        name:
          type: string
        email:
          type: string
        address:
          type: string
        phoneNumber:
          type: string

    FinancialProductRequest:
      type: object
      properties:
        productType:
          type: string
        subType:
          type: string
        clientId:
          type: string
        balance:
          type: number
        creditLimit:
          type: number
          nullable: true
        interestRate:
          type: number
          nullable: true
        owners:
          type: array
          items:
            type: string
        authorizedSigners:
          type: array
          items:
            type: string
      required:
        - productType
        - subType
        - clientId
        - balance

    FinancialProductResponse:
      type: object
      properties:
        id:
          type: string
        productType:
          type: string
        subType:
          type: string
        clientId:
          type: string
        balance:
          type: number
        creditLimit:
          type: number
          nullable: true
        interestRate:
          type: number
          nullable: true
        owners:
          type: array
          items:
            type: string
        authorizedSigners:
          type: array
          items:
            type: string

    TransactionRequest:
      type: object
      properties:
        productId:
          type: string
        type:
          type: string
          enum: [deposit, withdrawal, payment, purchase]
        amount:
          type: number
        transactionDate:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [completed, pending, failed]
      required:
        - productId
        - type
        - amount
        - transactionDate
        - status

    TransactionResponse:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        type:
          type: string
        amount:
          type: number
        transactionDate:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        status:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string